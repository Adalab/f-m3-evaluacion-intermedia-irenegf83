{"version":3,"sources":["components/Pokemon.js","components/PokeList.js","App.js","serviceWorker.js","index.js"],"names":["Pokemon","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","classFavorite","handleClick","bind","assertThisInitialized","setState","prevState","data","react_default","a","createElement","className","concat","onClick","src","url","alt","name","types","map","type","React","Component","PokeList","pokemonArr","components_Pokemon","pokemon","id","evolution","App","components_PokeList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOA8CeA,cA3CX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,cAAe,IAEnBR,EAAKS,YAAcT,EAAKS,YAAYC,KAAjBT,OAAAU,EAAA,EAAAV,CAAAD,IALLA,6EASdG,KAAKS,SAAS,SAACC,GASX,MAAO,CACHL,cAPwB,KAA5BK,EAAUL,cAAkC,WAAwB,uCAYnE,IACGM,EAASX,KAAKJ,MAAde,KACAN,EAAkBL,KAAKI,MAAvBC,cACR,OACIO,EAAAC,EAAAC,cAAA,MAAIC,UAAS,QAAAC,OAAUX,GAAiBY,QAASjB,KAAKM,aAClDM,EAAAC,EAAAC,cAAA,OAAKI,IAAKP,EAAKQ,IAAKC,IAAI,KACxBR,EAAAC,EAAAC,cAAA,UAAKH,EAAKU,MACVT,EAAAC,EAAAC,cAAA,UACCH,EAAKW,MAAMC,IAAI,SAAAC,GACZ,OACAZ,EAAAC,EAAAC,cAAA,UAAKU,cAnCHC,IAAMC,WCYbC,mLAVF,IACGC,EAAe5B,KAAKJ,MAApBgC,WACR,OACIhB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACTa,EAAWL,IAAI,SAAAZ,GAAI,OAAIC,EAAAC,EAAAC,cAACe,EAAD,CAASlB,KAAMA,cALhCc,IAAMC,WCEvBI,SAAU,CACd,CAACC,GAAK,EAAEV,KAAO,YAAYC,MAAQ,CAAC,SAAS,SAASU,UAAY,KAAKb,IAAM,kFAC7E,CAACY,GAAK,EAAEV,KAAO,UAAUC,MAAQ,CAAC,SAAS,SAASU,UAAY,YAAYb,IAAM,kFAClF,CAACY,GAAK,EAAEV,KAAO,WAAWC,MAAQ,CAAC,SAAS,SAASU,UAAY,UAAUb,IAAM,kFACjF,CAACY,GAAK,EAAEV,KAAO,aAAaC,MAAQ,CAAC,QAAQU,UAAY,KAAKb,IAAM,kFACpE,CAACY,GAAK,EAAEV,KAAO,aAAaC,MAAQ,CAAC,QAAQU,UAAY,aAAab,IAAM,kFAC5E,CAACY,GAAK,EAAEV,KAAO,YAAYC,MAAQ,CAAC,SAAS,QAAQU,UAAY,aAAab,IAAM,kFACpF,CAACY,GAAK,EAAEV,KAAO,WAAWC,MAAQ,CAAC,SAASU,UAAY,KAAKb,IAAM,kFACnE,CAACY,GAAK,EAAEV,KAAO,YAAYC,MAAQ,CAAC,SAASU,UAAY,WAAWb,IAAM,kFAC1E,CAACY,GAAK,EAAEV,KAAO,YAAYC,MAAQ,CAAC,SAASU,UAAY,YAAYb,IAAM,kFAC3E,CAACY,GAAK,GAAGV,KAAO,WAAWC,MAAQ,CAAC,OAAOU,UAAY,KAAKb,IAAM,qFAYrDc,MATf,WACE,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,uBACAH,EAAAC,EAAAC,cAACoB,EAAD,CAAUN,WAAYE,MCVRK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fa56e249.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Pokemon extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            classFavorite: ''\n        };\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick() {\n        this.setState((prevState) => {\n            let newClass;\n            \n            prevState.classFavorite === '' ? newClass = 'favorite' : newClass = '';\n            // if(prevState.classFavorite === '') {\n            //     newClass = 'favorite';\n            // } else {\n            //     newClass = '';\n            // }\n            return {\n                classFavorite: newClass\n            }\n            \n        });\n    }\n    render() {\n        const { data } = this.props;\n        const { classFavorite } = this.state;\n        return (\n            <li className={`card ${classFavorite}`} onClick={this.handleClick}>\n                <img src={data.url} alt=\"\"/>\n                <h2>{data.name}</h2>\n                <ol>\n                {data.types.map(type => {\n                    return(\n                    <li>{type}</li>\n                    )\n                })}\n                </ol>\n            </li>\n        );\n    }\n}\n\nPokemon.propTypes = {\n    data: PropTypes.object,\n}\n\nexport default Pokemon;","import React from 'react';\nimport Pokemon from './Pokemon'\nimport PropTypes from 'prop-types';\n\nclass PokeList extends React.Component {\n    render() {\n        const { pokemonArr } = this.props;\n        return (\n            <ul className=\"container\">\n                {pokemonArr.map(data => <Pokemon data={data} />)}\n            </ul>\n        );\n    }\n}\n\nPokeList.propTypes = {\n    pokemonArr: PropTypes.arrayOf(PropTypes.object),\n}\n\nexport default PokeList;","import React from 'react';\nimport PokeList from './components/PokeList';\n\nimport './App.css';\n\nconst pokemon = [\n  {\"id\":1,\"name\":\"bulbasaur\",\"types\":[\"poison\",\"grass\"],\"evolution\":null,\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png\"},\n  {\"id\":2,\"name\":\"ivysaur\",\"types\":[\"poison\",\"grass\"],\"evolution\":\"bulbasaur\",\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/2.png\"},\n  {\"id\":3,\"name\":\"venusaur\",\"types\":[\"poison\",\"grass\"],\"evolution\":\"ivysaur\",\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/3.png\"},\n  {\"id\":4,\"name\":\"charmander\",\"types\":[\"fire\"],\"evolution\":null,\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/4.png\"},\n  {\"id\":5,\"name\":\"charmeleon\",\"types\":[\"fire\"],\"evolution\":\"charmander\",\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/5.png\"},\n  {\"id\":6,\"name\":\"charizard\",\"types\":[\"flying\",\"fire\"],\"evolution\":\"charmeleon\",\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/6.png\"},\n  {\"id\":7,\"name\":\"squirtle\",\"types\":[\"water\"],\"evolution\":null,\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/7.png\"},\n  {\"id\":8,\"name\":\"wartortle\",\"types\":[\"water\"],\"evolution\":\"squirtle\",\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/8.png\"},\n  {\"id\":9,\"name\":\"blastoise\",\"types\":[\"water\"],\"evolution\":\"wartortle\",\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/9.png\"},\n  {\"id\":10,\"name\":\"caterpie\",\"types\":[\"bug\"],\"evolution\":null,\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/10.png\"}\n];\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"main-title\">Mi lista de pokemon</h1>\n      <PokeList pokemonArr={pokemon} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}